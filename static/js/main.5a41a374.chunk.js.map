{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","venues","loadMap","url","index","window","document","getElementsByTagName","script","createElement","src","async","defer","parentNode","insertBefore","loadScript","initMap","_this","fetchVenues","axios","get","URLSearchParams","client_id","client_secret","query","near","v","then","response","setState","data","groups","items","catch","error","console","log","map","google","maps","Map","getElementById","center","lat","lng","zoom","infowindow","InfoWindow","myVenue","contentStr","concat","venue","name","location","address","marker","Marker","position","title","icons","museum","icon","locationData","LatLng","type","i","length","hiddenPlaces","addListener","setContent","open","this","react_default","a","id","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAyIeA,iNAnIbC,MAAQ,CACNC,OAAQ,MAMZC,QAAU,YAmHV,SAAoBC,GAClB,IAAIC,EAASC,OAAOC,SAASC,qBAAqB,UAAU,GACxDC,EAASH,OAAOC,SAASG,cAAc,UAC3CD,EAAOE,IAAMP,EACbK,EAAOG,OAAQ,EACfH,EAAOI,OAAQ,EACfR,EAAMS,WAAWC,aAAaN,EAAQJ,GAxHpCW,CAAW,oGACXV,OAAOW,QAAUC,EAAKD,WAGxBE,YAAc,WAUZC,IAAMC,IARW,gDAQI,IAAIC,gBAPN,CACjBC,UAAW,mDACXC,cAAe,mDACfC,MAAO,SACPC,KAAM,aACNC,EAAG,cAGJC,KAAK,SAAAC,GACJX,EAAKY,SAAS,CACZ5B,OAAQ2B,EAASE,KAAKF,SAASG,OAAO,GAAGC,OACxCf,EAAKf,aAET+B,MAAM,SAAAC,GACLC,QAAQC,IAAI,QAAUF,QAI1BlB,QAAU,WAGR,IAAMqB,EAAM,IAAIhC,OAAOiC,OAAOC,KAAKC,IAAIlC,SAASmC,eAAe,OAAQ,CACrEC,OAAQ,CAACC,IAAK,QAASC,IAAK,SAC5BC,KAAM,KAIJC,EAAa,IAAIzC,OAAOiC,OAAOC,KAAKQ,WAGxC9B,EAAKjB,MAAMC,OAAOoC,IAAI,SAAAW,GAuCtB,IArCE,IAAIC,EAAa,GAAAC,OAAGF,EAAQG,MAAMC,MAAQ,WAAzB,GAAAF,OACdF,EAAQG,MAAME,SAASC,SAGpBC,EAAS,IAAIlD,OAAOiC,OAAOC,KAAKiB,OAAO,CAC3CC,SAAU,CAACd,IAAKK,EAAQG,MAAME,SAASV,IACrCC,IAAKI,EAAQG,MAAME,SAAST,KAC9BP,IAAKA,EACLqB,MAAOV,EAAQG,MAAMC,OAQnBO,EAAQ,CACVC,OAAQ,CACNC,KAJE,sDAQAC,EAAe,CACvB,CACEL,SAAU,IAAIpD,OAAOiC,OAAOC,KAAKwB,OAAO,QAAS,SACjDC,KAAM,UAER,CACEP,SAAU,IAAIpD,OAAOiC,OAAOC,KAAKwB,OAAO,QAAS,SACjDC,KAAM,UAER,CACEP,SAAU,IAAIpD,OAAOiC,OAAOC,KAAKwB,OAAO,QAAS,SACjDC,KAAM,WAICC,EAAI,EAAGA,EAAIH,EAAaI,OAAQD,IACvC,IAAIE,EAAe,IAAI9D,OAAOiC,OAAOC,KAAKiB,OAAO,CAC/CC,SAAUK,EAAaG,GAAGR,SAC1BI,KAAMF,EAAMG,EAAaG,GAAGD,MAAMH,KAClCxB,IAAKA,IAKT8B,EAAaC,YAAY,QAAS,cAIhCb,EAAOa,YAAY,QAAS,WAE5BtB,EAAWuB,WAAWpB,GAEpBH,EAAWwB,KAAKjC,EAAKkB,2FAhGzBgB,KAAKrD,+CAuGL,OACEsD,EAAAC,EAAAhE,cAAA,YACE+D,EAAAC,EAAAhE,cAAA,OAAKiE,GAAG,YACNF,EAAAC,EAAAhE,cAAA,sCACA+D,EAAAC,EAAAhE,cAAA,uMAGF+D,EAAAC,EAAAhE,cAAA,OAAKiE,GAAG,gBArHEC,aCQEC,QACW,cAA7BvE,OAAOgD,SAASwB,UAEe,UAA7BxE,OAAOgD,SAASwB,UAEhBxE,OAAOgD,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OAAOR,EAAAC,EAAAhE,cAACwE,EAAD,MAAS3E,SAASmC,eAAe,SD2H3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.5a41a374.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios'\n\nclass App extends Component {\n\n  state = {\n    venues: []\n  }\n\n  componentDidMount(){\n    this.fetchVenues()\n  }\nloadMap = () => {\n    loadScript(\"https://maps.googleapis.com/maps/api/js?AIzaSyCQuQD-gp8vy07mtcRpjAEdBCQwbnl-1Kk&callback=initMap\")\n    window.initMap = this.initMap\n  }\n\n  fetchVenues = () => {\n    //API request URL\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\"\n    const parameters = {\n      client_id: \"USOWUM0VD5VWO0SNDZW410JWYYGSHQRTSQK0SPN5JXSZRQDE\",\n      client_secret: \"OU3YQ4VTIWNKG5DRTACUDUFCNSXVWHB5YEBDPXE0BVSOYG1C\",\n      query: \"museum\",\n      near: \"Copenhagen\",\n      v: \"20192007\"\n    }\n    axios.get(endPoint + new URLSearchParams(parameters))\n    .then(response => {\n      this.setState({\n        venues: response.data.response.groups[0].items\n      }, this.loadMap()) \n    })\n    .catch(error => {\n      console.log('ERROR' + error)\n    })\n  }\n\n  initMap = () => {\n\n    // Create A Map\n    const map = new window.google.maps.Map(document.getElementById('map'), {\n      center: {lat: 55.6761, lng: 12.5683},\n      zoom: 12\n    })\n\n    //create info window\n    var infowindow = new window.google.maps.InfoWindow()\n\n    //Display dynamic markers\n    this.state.venues.map(myVenue => {\n      \n      var contentStr = `${myVenue.venue.name}` +'<br><br>' +\n      `${myVenue.venue.location.address}`\n\n      //create marker\n      const marker = new window.google.maps.Marker({\n        position: {lat: myVenue.venue.location.lat,\n          lng: myVenue.venue.location.lng},\n        map: map,\n        title: myVenue.venue.name\n        \n      });\n      \n      //create costum icons\n      var iconBase =\n            'https://img.icons8.com/color/48/000000/museum.png';\n\n      var icons = {\n        museum: {\n          icon: iconBase\n        }\n      };\n      //create hidden places as an array \n      const locationData = [\n    {\n      position: new window.google.maps.LatLng(55.6722, 12.5898),\n      type: 'museum'\n    }, \n    {\n      position: new window.google.maps.LatLng(55.6788, 12.5843),\n      type: 'museum'\n    }, \n    {\n      position: new window.google.maps.LatLng(55.6744, 12.5768),\n      type: 'museum'\n    }\n];\n    //loop through hidden places\n    for (var i = 0; i < locationData.length; i++) {\n      var hiddenPlaces = new window.google.maps.Marker({\n        position: locationData[i].position,\n        icon: icons[locationData[i].type].icon,\n        map: map\n      });\n    };\n\n    //add info window to marker\n    hiddenPlaces.addListener('click', function() {\n    })\n\n      //add info window to marker\n      marker.addListener('click', function() {\n        //append content to info window\n      infowindow.setContent(contentStr)\n        //open infowindow\n        infowindow.open(map, marker)\n      })\n    })\n    \n  }\n\n  render() {\n    return (\n      <main>\n        <div id=\"info-box\">\n          <h3>Welcome to HiddenMuseum!</h3>\n          <p>The icons with the style of a temple is where a hidden museum lies.\n          There is no description. It is up to you to go out there and explore them on your own and find out what lies hidden! </p>\n        </div>\n        <div id=\"map\">\n        </div>\n      </main>\n    )\n  }\n}\n\nfunction loadScript(url) {\n  var index  = window.document.getElementsByTagName(\"script\")[0]\n  var script = window.document.createElement(\"script\")\n  script.src = url\n  script.async = true\n  script.defer = true\n  index.parentNode.insertBefore(script, index)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}